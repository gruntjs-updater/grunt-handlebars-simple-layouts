{"name":"Grunt-handlebars-simple-layouts","tagline":"","body":"Grunt Handlebars Layouts\r\n========================\r\n\r\nHandlebars helpers which implement Jade-like layout blocks.\r\n\r\n* Extend: extend layout (partial)\r\n* Append\r\n* Replace\r\n* Prepend\r\n\r\nA grunt.js task to render Handlebars templates against a context &amp; produce HTML.\r\n\r\nIf you want to pre-compilation your Handlebars use the [grunt-contrib-handlebars](https://github.com/gruntjs/grunt-contrib-handlebars) Grunt task. This task will pre-compile multiple templates into a single file. \r\n\r\n### Resources\r\n\r\n* [Handlebars templates](http://handlebarsjs.com)\r\n* [Mustache](http://mustache.github.io)\r\n* [Treehouse Blog, Handlebars.js Part 2: Partials and Helpers](http://blog.teamtreehouse.com/handlebars-js-part-2-partials-and-helpers)\r\n* [NetTuts+: An Introduction to Handlebars](http://net.tutsplus.com/tutorials/javascript-ajax/introduction-to-handlebars/)\r\n \r\n\r\n## About\r\n\r\nThis task renders Handlebars templates against a context to produce HTML.\r\n\r\nInspired by [grunt-dust-html](https://github.com/ehynds/grunt-dust-html) and [handlebars-layouts](https://github.com/shannonmoeller/handlebars-layouts)\r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.0`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-handlebars-layouts --save-dev\r\n```\r\n\r\nNext, add this line to your project's grunt file:\r\n\r\n```js\r\ngrunt.loadNpmTasks(\"grunt-handlebars-layouts\");\r\n```\r\n\r\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.3](https://github.com/gruntjs/grunt-contrib-handlebars/tree/grunt-0.3-stable).*\r\n\r\nLastly, add the configuration settings (see below) to your grunt file.\r\n\r\n## Documentation\r\n\r\nThis task has two required properties, `src` and `dest`. `src` is the path to your source file and `dest` is the file this task will write to (relative to the grunt.js file). If this file already exists **it will be overwritten**.\r\n\r\n```js\r\n  files: {\r\n    'dest.html': 'src.html'\r\n  },\r\n```\r\n\r\nAn example configuration looks like this:\r\n\r\n```js\r\n  grunt.initConfig({\r\n    handlebarslayouts: {\r\n      home: {\r\n        files: {\r\n          'dist/home.html': 'src/home.html'\r\n        },\r\n        options: {\r\n          partials: [\r\n            'src/partials/*.hbs',\r\n            'src/layout.html'\r\n          ],\r\n          modules: [\r\n            'src/helpers/helpers-*.js'\r\n          ],\r\n          basePath: 'src/',\r\n          context: {\r\n            title: 'Layout Test',\r\n            items: [\r\n              'apple',\r\n              'orange',\r\n              'banana'\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n  grunt.registerTask('default', ['handlebarslayouts']);\r\n```\r\n\r\n### Optional Configuration Properties\r\n\r\nThis plugin can be customized by specifying the following options:\r\n\r\n* `partials`: partials files.\r\n* `basePath`: The base location to all your templates so that includes/partials can be resolved correctly.\r\n* `context`: A JavaScript object to render the template against. This option supports a few different types:\r\n* `modules`: add your customs helpers\r\n* `strict`: when is true the process fails if one file is missing (when is false juste a warning is trigger)\r\n\r\nUseful Handlebars Helpers : [handlebars-helpers](https://github.com/assemble/handlebars-helpers)\r\n\r\n**String**: the location to a file containing valid JSON:\r\n\r\n```js\r\ncontext: '/path/to/file.json'\r\n```\r\n\r\n**Object**: a regular ol' JavaScript object:\r\n\r\n```js\r\ncontext: {\r\n  pageTitle: 'My Awesome Website'\r\n}\r\n```\r\n\r\n**Array**: an array of contexts, either string (files to parse) or JavaScript objects, or both. Each item in the array will be merged into a single context and rendered against the template:\r\n    \r\n```js\r\ncontext: [\r\n  'path/to/context.json',\r\n  'path/to/another/context.json',\r\n  { more: 'data' }\r\n]\r\n```\r\n\r\n### Template example\r\n\r\n```html\r\n{{#extend \"layout\"}}\r\n    {{#append \"head\"}}\r\n      <link rel=\"stylesheet\" href=\"assets/css/home.css\" />\r\n    {{/append}}\r\n\r\n    {{#replace \"body\"}}\r\n      <h2>Welcome Home</h2>\r\n\r\n      <ul>\r\n        {{#items}}\r\n          <li>{{.}}</li>\r\n        {{/items}}\r\n      </ul>\r\n    {{/replace}}\r\n\r\n    {{#prepend \"footer\"}}\r\n      <script src=\"assets/js/analytics.js\"></script>\r\n    {{/prepend}}\r\n{{/extend}}\r\n```\r\n\r\n### Layout example\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\r\n    {{#block \"head\"}}\r\n          <title>{{title}}</title>\r\n          <meta name=\"description\" content=\"\">\r\n    {{/block}}\r\n  </head>\r\n\r\n  <body>\r\n    <div class=\"site\">\r\n      <div class=\"site-hd\" role=\"banner\">\r\n        {{#block \"header\"}}\r\n            <h1>{{title}}</h1>\r\n        {{/block}}\r\n      </div>\r\n\r\n      <div class=\"site-bd\" role=\"main\">\r\n        {{#block \"body\"}}\r\n            <h2>Hello World</h2>\r\n        {{/block}}\r\n      </div>\r\n\r\n      <div class=\"site-ft\" role=\"contentinfo\">\r\n        {{#block \"footer\"}}\r\n            <small>&copy; 2014</small>\r\n        {{/block}}\r\n      </div>\r\n    </div>\r\n\r\n    {{#block \"footer\"}}\r\n      <p>footer</p>\r\n    {{/block}}\r\n  \r\n    {{> footer}}\r\n  </body>\r\n</html>\r\n```\r\n\r\n### Partial example\r\n\r\n```html\r\n<footer>footer</footer>\r\n```\r\n\r\n### Custom Helper example\r\n\r\nHelpers can either be an object or a single register function. If register is on the object, then it calls the register function, passing in the engine. \r\n\r\n```js\r\nmodule.exports.register = function (Handlebars, options)  { \r\n  Handlebars.registerHelper('foo', function ()  { \r\n    return 'foo';\r\n  });\r\n};\r\n```\r\n\r\n#### MD5 Helper (inspired by [handlebars-md5](https://github.com/neoziro/handlebars-md5))\r\n\r\n```js\r\n'use strict';\r\n\r\nvar crypto = require('crypto'),\r\n    fs = require('fs');\r\n\r\n// The module to be exported\r\nvar helpers = {\r\n  md5: function (path) {\r\n    var content = fs.readFileSync(path);\r\n    return crypto.createHash('md5').update(content).digest('hex');\r\n  }\r\n};\r\n\r\n// Export helpers\r\nmodule.exports.register = function (Handlebars, options) {\r\n  options = options || {};\r\n\r\n  for (var helper in helpers) {\r\n    if (helpers.hasOwnProperty(helper)) {\r\n      Handlebars.registerHelper(helper, helpers[helper]);\r\n    }\r\n  }\r\n};\r\n```\r\n\r\n#### Foo and bar Helpers\r\n\r\n```js\r\n'use strict';\r\n\r\n// The module to be exported\r\nvar helpers = {\r\n  foo: function () {\r\n    return 'foo';\r\n  },\r\n  bar: function () {\r\n    return 'bar';\r\n  }\r\n};\r\n\r\n// Export helpers\r\nmodule.exports.register = function (Handlebars, options) {\r\n  options = options || {};\r\n\r\n  for (var helper in helpers) {\r\n    if (helpers.hasOwnProperty(helper)) {\r\n      Handlebars.registerHelper(helper, helpers[helper]);\r\n    }\r\n  }\r\n};\r\n```\r\n\r\n#### Handlebars Markdown Helper\r\n\r\nVery simple Markdown for partial. **do not forget** to add your .md files to the partial list.\r\n\r\n```js\r\noptions: {\r\n  partials: 'src/partials/*.md',\r\n  ...\r\n}\r\n```\r\n\r\n```js\r\n/**\r\n * Handlebars Markdown Helpers\r\n * Copyright (c) 2014 Thierry Charbonnel\r\n * Licensed under the MIT License (MIT).\r\n */\r\n'use strict';\r\n\r\nvar marked = require('marked');\r\n\r\n// Export helpers\r\nmodule.exports.register = function (Handlebars, options) {\r\n  options = options || {};\r\n  options.marked = options.marked || {\r\n    renderer: new marked.Renderer(),\r\n    gfm: true,\r\n    tables: true,\r\n    breaks: false,\r\n    pedantic: false,\r\n    sanitize: true,\r\n    smartLists: true,\r\n    smartypants: false\r\n  };\r\n  \r\n  Handlebars.registerHelper('md', function(name, context){\r\n    var result;\r\n    marked.setOptions(options.marked);\r\n    // Convert inline markdown by prepending the name string with `:`\r\n    if(name.match(/^:/)) {\r\n      result = marked(name.replace(/^:/, ''));\r\n    } else {\r\n      try {\r\n        result = marked(Handlebars.partials[name]);\r\n      } catch(err) {\r\n        result = '<!-- error -->'; \r\n      }\r\n    }\r\n    return new Handlebars.SafeString(result); \r\n  });  \r\n};\r\n\r\n```\r\n\r\n## npm Helpers \r\n\r\nAdd it in devDependencies and in gruntfiles.js\r\n\r\n```js\r\n\"devDependencies\": {\r\n  \"handlebars-helper-moment\": \"*\"\r\n},\r\n```\r\n\r\nAdd it in gruntfiles.js\r\n\r\n```js\r\nhandlebarslayouts: {\r\n  home: {\r\n    files: {\r\n      'dist/home.html': 'src/home.html',\r\n      'dist/index.html': 'src/index.html'\r\n    },\r\n    options: {\r\n      ...\r\n      modules: ['src/helpers/helpers-*.js', 'handlebars-helper-moment'],\r\n      ...\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nor ( v0.1.4 > )\r\n\r\n```js\r\nhandlebarslayouts: {\r\n  home: {\r\n    files: {\r\n      'dist/*.html': 'src/*.hsb'\r\n    },\r\n    options: {\r\n      ...\r\n      modules: ['src/helpers/helpers-*.js', 'handlebars-helper-moment'],\r\n      ...\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```\r\nnpm install\r\n```\r\n\r\n### Tested Helpers\r\n\r\n* [handlebars-helper-moment](https://github.com/helpers/handlebars-helper-moment)\r\n\r\n\r\n## suggested structure\r\n\r\n### A basic Handlebars-layouts site usually looks something like this:\r\n\r\n```\r\n.\r\n├── partials\r\n|   ├── footer.(html|hsb|md)\r\n|   └── header.(html|hsb|md)\r\n├── pages\r\n|   ├── 2014-08-14-Handlebars-layouts-foo.(html|hsb)\r\n|   └── 2014-08-14-Handlebars-layouts-bar.(html|hsb)\r\n├── data\r\n|   └── members.json\r\n├── helpers\r\n|   └── helpers-*.js\r\n└── index.html\r\n```\r\n\r\n\r\n## grunt file example\r\n\r\n\r\n```js\r\n\r\n/*global module:false*/\r\nmodule.exports = function(grunt) {\r\n  'use strict';\r\n  grunt.initConfig({\r\n  \r\n    handlebarslayouts: {\r\n      dev: {\r\n        files: {\r\n          //'dist/home.html': 'src/home.html'\r\n          'dist/*.html': 'src/*.hsb'\r\n        },\r\n        options: {\r\n          partials: ['src/partials/*.hbs', 'src/partials/*.md', 'src/layout.html'],\r\n          basePath: 'src/',\r\n          modules: ['src/helpers/helpers-*.js', 'handlebars-helper-moment'],\r\n          context: {\r\n            title: 'Layout Test',\r\n            projectName: 'Grunt handlebars layout',\r\n            items: [\r\n              'apple',\r\n              'orange',\r\n              'banana'\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \r\n    connect: {\r\n      server: {\r\n        options: {\r\n          livereload: true,\r\n          port: 8000,\r\n          base:'dist/',\r\n          open: true\r\n        }\r\n      }\r\n    },\r\n    \r\n    watch: {\r\n      layout: {\r\n        files: 'src/layout.html',\r\n        tasks: 'handlebarslayouts:dev'\r\n      },\r\n      hsb: {\r\n        files: 'src/**/*.hsb',\r\n        tasks: 'handlebarslayouts:dev'\r\n      },\r\n      options: {\r\n        livereload: true\r\n      }\r\n    },\r\n    \r\n  });\r\n  \r\n  grunt.loadTasks('../tasks');\r\n  \r\n  grunt.loadNpmTasks('grunt-contrib-connect');\r\n  grunt.loadNpmTasks('grunt-contrib-watch');\r\n\r\n  grunt.registerTask('default', ['handlebarslayouts']);\r\n  \r\n  grunt.registerTask('serve', ['handlebarslayouts', 'connect:server', 'watch']);\r\n  \r\n};\r\n\r\n\r\n\r\n\r\n\r\n``` \r\n\r\n=======\r\n\r\n## Other interresting projects \r\n\r\n* To precompile Handlebars templates to JST file use [grunt-contrib-handlebars](https://github.com/gruntjs/grunt-contrib-handlebars)\r\n* Static site generator for Grunt.js, Yeoman and Node.js. [Assemble](http://assemble.io)\r\n* This task renders Dust templates against a context to produce HTML. [grunt-dust-html](https://github.com/ehynds/grunt-dust-html) \r\n* Handlebars helpers which implement Jade-like layout blocks for Node project [handlebars-layouts](https://github.com/shannonmoeller/handlebars-layouts)\r\n* Library of 100+ handlebars helpers. [handlebars-helpers](https://github.com/assemble/handlebars-helpers)\r\n\r\n## Release History and Roadmap\r\n\r\n * 2015-01-21   v0.2.1   context can loaded as files (exemple_2)\r\n * 2015-01-21   v0.2.0   update code\r\n * 2015-01-21   v0.2.0b  ready to work with grunt-contrib-connect and  grunt-contrib-watch.\r\n * 2014-10-08   v0.1.6   windows fix.\r\n * 2014-10-08   v0.1.4   Add * for files list and unique name for Partials.\r\n * 2014-09-05   v0.1.3   Better log error + strict mode.\r\n * 2014-09-05   v0.1.1   Async optimisation.\r\n * 2014-09-03   v0.1.0   First Release.\r\n * 2014-08-14   v0.0.*   Alpha ans Beta Releases\r\n\r\n## License\r\n\r\nCopyright (c) 2014 Thierry Charbonnel, contributors.  \r\nReleased under the MIT license\r\n\r\n\r\n## Gulp version. \r\n\r\nSooooon. \r\nHelp is welcome.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}